{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Background\n",
    "\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Automatic differentiation (AD_) is a family of techniques for efficiently and accurately evaluating derivatives of numeric functions expressed as computer programs. Application of AD includes Newtonâ€™s method for solving nonlinear equations, real-parameter optimization, probabilistic inference, and backpropagation in neural networks. AD has been extremely popular because of the booming development in machine learning and deep learning techniques. Our AD sofeware package enable user to calculate derivatives using the forward and reverse mode. \n",
    "\n",
    "Our package has feature including support for second order derivatives (including Hssian matrix), rooting finding, optimization(Newton, Gradient Descent, BFGS), and backpropagation.\n",
    "\n",
    "\n",
    "\n",
    "## Mathematical Background\n",
    "\n",
    "Automatic Differentiation decomposes a complex function into a sequence of operations on elementary functions, evaluates the derivatives at each intermediate stage, repeatedly applies the chain rule to obtain the derivative of the outermost function.\n",
    "We provides explanations for related math concepts below. \n",
    "\n",
    "**Elimentary functions**\n",
    "\n",
    "The class of functions consisting of the polynomials, the exponential functions, the logarithmic functions, the trigonometric functions, the inverse trigonometric functions,and the functions obtained from those listed by the four arithmetic operations and by superposition(i.e. composition),applied by finitely many times.\n",
    "\n",
    "**Chain Rule**\n",
    " - Used to compute the derivative of a composite function\n",
    " - Core of automatic differentiation\n",
    "\n",
    "For the first derivative:\n",
    "\n",
    "$$\n",
    "\\dfrac{dy}{dx} = \\dfrac{dy}{du}\\cdot\\dfrac{du}{dx}\n",
    "$$\n",
    "\n",
    "For the second derivative:\n",
    "\n",
    "$$\\dfrac{\\partial^2 t}{\\partial x_i \\partial x_j} = \\sum_k(\\dfrac{\\partial y}{\\partial u_k}\\dfrac{u_k^2}{\\partial x_i \\partial x_j}) + \\sum_{k,l}(\\dfrac{\\partial^2 y}{\\partial u_k \\partial u_l}\\dfrac{\\partial u_k}{\\partial x_i}\\dfrac{\\partial u_l}{\\partial x_j})$$\n",
    "\n",
    "**Topological Graph**\n",
    " - Each node represent a variable\n",
    " - Arrows indicate topological orders(order of operations) and operations themselves.\n",
    "\n",
    "\n",
    "**Forward Mode Autodifferentiation**\n",
    "\n",
    "Follow the topological order and store the values of each variable in the nodes.\n",
    "visit each node in topological order. Let x denote our innermost function. For variable $u_i=g_i(v)$ we already know $\\dfrac{dv}{dx}$, calculate $\\dfrac{du_i}{dx}= \\dfrac{du_i}{dv}\\dfrac{dv}{dx}$\n",
    "\n",
    "\n",
    "**Reverse Mode Autodifferentiation**\n",
    "\n",
    "Has forward computation and backward computation\n",
    "\n",
    "    Step 1: Forward Computation\n",
    "    \n",
    "Follow the topological order and store the values of each variable in each nodes.\n",
    "    \n",
    "    \n",
    "    Step 2: Backward Computation\n",
    "    \n",
    "let y denote our final output variable and $u_j$, $v_j$ denote the intermediate variables\n",
    "\n",
    "1. Initialize all partial derivative $\\dfrac{dy}{du_j}$ to 0 and dy/dy = 1\n",
    "\n",
    "2. visit each node in reverse topological order. For variable $u_i=g_i(v_1,...,v_n)$ we already know $\\dfrac{dy}\n",
    "    {du_i}$, increment $\\dfrac{dy}{dv_j}$ by $\\dfrac{dy}{du_i}\\dfrac{du_i}{dv_j}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
